$(document).ready(function(){

	var newHistory;
	var newCount;

	var board,
	  game = new Chess(),
	  statusEl = $('#status'),
	  fenEl = $('#fen'),
	  pgnEl = $('#pgn');

	// do not pick up pieces if the game is over
	// only pick up pieces for the side to move
	var onDragStart = function(source, piece, position, orientation) {
	  if (game.game_over() === true ||
	      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
	      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
	    return false;
	  }
	};

	var onDrop = function(source, target) {
	  // see if the move is legal
	  var move = game.move({
	    from: source,
	    to: target,
	    promotion: 'q' // NOTE: always promote to a queen for example simplicity
	  });

	  // illegal move
	  if (move === null) return 'snapback';

	  updateStatus();
	};

	// update the board position after the piece snap
	// for castling, en passant, pawn promotion
	var onSnapEnd = function() {
	  board.position(game.fen());
	};

	var updateStatus = function() {
	  var status = '';

	  var moveColor = 'White';
	  if (game.turn() === 'b') {
	    moveColor = 'Black';
	  }

	  // checkmate?
	  if (game.in_checkmate() === true) {
	    status = 'Game over, ' + moveColor + ' is in checkmate.';
	  }

	  // draw?
	  else if (game.in_draw() === true) {
	    status = 'Game over, drawn position';
	  }

	  // game still on
	  else {
	    status = moveColor + ' to move';

	    // check?
	    if (game.in_check() === true) {
	      status += ', ' + moveColor + ' is in check';
	    }
	  }

	  statusEl.html(status);
	  fenEl.html(game.fen());
	  pgnEl.html(game.pgn());
	  $('.pgn').attr("value", document.querySelector('#pgn').innerHTML);
	};

	var cfg = {
	  pieceTheme: '<%= image_path("/assets/{piece}.png") %>',
	  draggable: true,
	  position: 'start',
	  onDragStart: onDragStart,
	  onDrop: onDrop,
	  onSnapEnd: onSnapEnd
	};
	board = new ChessBoard('board', cfg);

	updateStatus();

	// mms: The more I think about it, the more I'd like to see these event handlers call methods
  // 	see how the functions above are used to configure the ChessBoard?  Encapsulation breeds concepts.  You do all sorts of stuff with a concept, once it is defined. Now, we just have blocks of code.

	// Clicking a game loads it on the gameboard
	// mms: interesting event notation.  Glad you were here to explain it.
	$('.gamebar').on("click", '.game-link', function(event){
		event.preventDefault();
		document.querySelector('.round').innerHTML = "Round " + $(this).data('round') + ":";
		document.querySelector('.white').innerHTML = $(this).data('white') + " ";
		document.querySelector('.white-elo').innerHTML = $(this).data('whiterating') + " vs. ";
		document.querySelector('.black').innerHTML = $(this).data('black') + " ";
		document.querySelector('.black-elo').innerHTML = $(this).data('blackrating');
		game.load_pgn($(this).data('pgn'));
		board.position(game.fen());
		newHistory = game.history();
		newCount = game.history().length;
		updateStatus();
	})

	// Clicking the reset button resets the board to the starting position
	$('.reset').on("click", function(){
		game.reset();
		board.position(game.fen());
		document.querySelector('.round').innerHTML = "";
		document.querySelector('.white').innerHTML = "";
		document.querySelector('.white-elo').innerHTML = "";
		document.querySelector('.black').innerHTML = "";
		document.querySelector('.black-elo').innerHTML = "";
		newHistory = [];
		newCount = 0;
		updateStatus();
	})

	// Clicking the clear button empties the board
	$('.clear').on("click", function(){
		game.clear();
		board.position(game.fen());
		document.querySelector('.round').innerHTML = "";
		document.querySelector('.white').innerHTML = "";
		document.querySelector('.white-elo').innerHTML = "";
		document.querySelector('.black').innerHTML = "";
		document.querySelector('.black-elo').innerHTML = "";
		newHistory = [];
		newCount = 0;
		updateStatus();
	})

	// Clicking back moves backward one move in the currently loaded game
	$('.back').on("click", function(){
		if(newCount && newCount > 0){
		  game.undo();
		  newCount--;
		}
		board.position(game.fen());
		updateStatus();
	})

	// Clicking forward moves forward one move in the currently loaded game
	$('.forward').on("click", function(){
		if(newCount !== null && newCount < newHistory.length){
		  game.move(newHistory[newCount]);
		  newCount++;
		}
		board.position(game.fen());
		updateStatus();
	})



})
